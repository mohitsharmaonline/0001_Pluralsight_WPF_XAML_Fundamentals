<Window x:Class="Button_template_Demo.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Button_template_Demo"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <!-- What I really want is the 
        background of my button to reflect one 
        of the background colors has been chosen
        up here when the user created the 
        control because there is a standard 
        property called background. If I set 
        this you can see nothing is happening, 
        so this hard coding of colors isn't 
        really the right way to go. -->
        <Button Width="75" Height="24" 
                Background="Yellow">
            <!--Property Element Syntax: So if
            I create an element 
            with a dot in the name like this,
            XAML interprets the bit before the
            dot as a class name and then the 
            part after the dot as a property
            name. So I'm telling XAML I'd like 
            to set the button's template 
            property here. So it won't
            interpret this as being normal 
            content of the button it will 
            understand that what goes inside
            of here is actually a value for the 
            property. And now, I can put any
            object I like in here as the XAML, 
            or at least that's what the XAML
            syntax means. This particular 
            property needs to be a particular 
            type which is control template.-->
            <Button.Template>
                <!--Now control templates need
                to be told what their target 
                type is, so this needs to know 
                that it's the template for a 
                button. This may seem slightly 
                odd because you might think it 
                could work it out from the
                context, however, normally 
                control templates are defined 
                externally to the controls
                themselves. -->
                <ControlTemplate 
                    TargetType="Button">
                    <Grid>
                        <!-- Instead what we want to do is tell WPF that this property here, this fill property of the rectangle, is going to reflect the value of the button's background.
                        And we do this using a special syntax, looks like this. I say template binding followed by the name of the property, and now, the fill of the rectangle is reflecting
                        the chosen background color of the property up here.-->
                        <!-- Now these curly brackets, these signify that this is not a normal property value. This tells XAML that I'm using something called a mark-up extension. -->
                        <Rectangle Fill="{TemplateBinding Background}"
                                   RadiusX="5"
                                   RadiusY="5"/>
                        <ContentPresenter
                            RecognizesAccessKey="True"
                            Content="{TemplateBinding Content}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Button.Template>
            _Click me
        </Button>
    </Grid>
</Window>
